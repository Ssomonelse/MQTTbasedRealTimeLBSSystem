package dao2;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import model.Location;

public class LocationDAO {
	
	private static LocationDAO locationDAO = null;
	private Connection conn = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;
	
	public static LocationDAO getInstance() {
		if(locationDAO == null){
			locationDAO = new LocationDAO();
		}
		return locationDAO;
	}
	
	public void dbConnect() {

        String url = "jdbc:mysql://localhost:3306/clocation";
        String jdbc = "com.mysql.jdbc.Driver";
        String user = "root";
        String pass = "tlagusdyd";
        
        try {
            Class.forName(jdbc);
            
            conn = DriverManager.getConnection(url, user, pass);
        } catch(Exception e) {
            System.out.println("dbConnectdbConnectdbConnectSQLException: " + e.getMessage());
        } finally{
        }
	}
	
	public void close(Connection conn, PreparedStatement pstmt){
        try{
            if ( pstmt != null){ pstmt.close(); }
        }catch(Exception e){}
        
        try{
            if ( conn != null){ conn.close(); }
        }catch(Exception e){}        
    }
    
    public void close(Connection conn, PreparedStatement pstmt, ResultSet rs){
        try{
            if ( rs != null){ rs.close(); }
        }catch(Exception e){}
        
        try{
            if ( pstmt != null){ pstmt.close(); }
        }catch(Exception e){}
        
        try{
            if ( conn != null){ conn.close(); }
        }catch(Exception e){}        
    }
	
	public void insertLocation(Location location) {
		try {
			dbConnect();
			String sql = "insert into locationdata(client_id, latitude, longitude, time) values(?,?,?,?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, location.getClient_id());
			pstmt.setDouble(2, location.getLatitude());
			pstmt.setDouble(3, location.getLongitude());
			pstmt.setLong(4, location.getTime());
			
			pstmt.executeUpdate();
			
			sql = "insert into currentlocation values (?, ?, ?, ?) on duplicate key "
					+ "update client_id=?, latitude=?, longitude=?, time=?;";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, location.getClient_id());
			pstmt.setDouble(2, location.getLatitude());
			pstmt.setDouble(3, location.getLongitude());
			pstmt.setLong(4, location.getTime());
			pstmt.setString(5, location.getClient_id());
			pstmt.setDouble(6, location.getLatitude());
			pstmt.setDouble(7, location.getLongitude());
			pstmt.setLong(8, location.getTime());
			
			pstmt.executeUpdate();
		} catch(Exception e) {
			System.out.println("insertLocationinsertLocationinsertLocationSQLException: " + e.getMessage());
		} finally {
			close(conn, pstmt);
		}
	}
	
	public Location getLeastLocation(){
		Location location =  new Location();
		try {
			dbConnect();
			String sql = "select latitude, longitude from testmovelocation where idtestmovelocation = (select max(idtestmovelocation) from testmovelocation);";
			
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				location.setLatitude(rs.getDouble("latitude"));
				location.setLongitude(rs.getDouble("longitude"));
			}
		} catch(Exception e) {
			System.out.println("getLeastLocationgetLeastLocationgetLeastLocationSQLException: " + e.getMessage());
		} finally {
			close(conn, pstmt, rs);
		}
		return location;
	}
	
	public List<Location> getAllLeastLocation(){
		List<Location> listLocation = new ArrayList<Location>();
		try {
			dbConnect();
			/*String sql = "select * from locationdata where (client_id, time) in "
					+ "(select client_id, max(time) from locationdata group by client_id);";*/
			String sql = "select * from currentlocation";
			
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				Location location = new Location();
				location.setId(rs.getInt("id"));
				location.setClient_id(rs.getString("client_id"));
				location.setLatitude(rs.getDouble("latitude"));
				location.setLongitude(rs.getDouble("longitude"));
				location.setTime(rs.getLong("time"));
				listLocation.add(location);
			}
		} catch(Exception e) {
			System.out.println("SQLException: 지나야 확인한번 해보자? 응? " + e.getMessage());
		} finally {
			close(conn, pstmt, rs);
		}
		return listLocation;
	}
	
	public List<String> getClientsAboutLocationRec(Double[] locations) {
		List<String> clients = new ArrayList<String>();
		try {
			dbConnect();
			/*String sql = "select client_id from locationdata where latitude<=? and "
					+ "latitude>=? and longitude<=? and longitude>=? and (client_id,time) in "
					+ "(select client_id,max(time) from locationdata group by client_id);";*/
			//37.55022105257947,127.13762815237351,37.5102109744057,127.08662815237346
			//북동 위도, 북동 경도, 남서 위도, 남서 경도
			// 0 2 1 3
			String sql = "select client_id from currentlocation where latitude<=? and "
					+ "latitude>=? and longitude<=? and longitude>=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setDouble(1, locations[0]);
			pstmt.setDouble(2, locations[2]);
			pstmt.setDouble(3, locations[1]);
			pstmt.setDouble(4, locations[3]);
			
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				clients.add(rs.getString("client_id"));
			}
		} catch(Exception e) {
			System.out.println("getClientsAboutLocationRecgetClientsAboutLocationRecSQLException: " + e.getMessage());
		} finally {
			close(conn, pstmt, rs);
		}
		return clients;
	}

	public List<String> getClientsAboutLocationCir(Double[] center, int radius) {
		List<String> clients = new ArrayList<String>();
		try {
			dbConnect();
			/*String sql = "SELECT client_id from locationdata "
					+ "where ((6371000*acos(cos(radians(?))"
					+ "*cos(radians(latitude))* cos(radians(longitude)-radians(?))"
					+ "+ sin(radians(?))*sin(radians(latitude)))) <= ?) "
					+ "and (client_id, time) in (select client_id, max(time) "
					+ "from locationdata group by client_id);";*/
			String sql = "SELECT client_id, (6371000*acos(cos(radians(?))*cos(radians(latitude))"
					+ "*cos(radians(longitude)-radians(?)) +sin(radians(?))*sin(radians(latitude)))) "
					+ "AS distance FROM currentlocation HAVING distance <= ? ORDER BY distance;";
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setDouble(1, center[0]);
			pstmt.setDouble(2, center[1]);
			pstmt.setDouble(3, center[0]);
			pstmt.setInt(4, radius);
			
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				clients.add(rs.getString("client_id"));
			}
		} catch(Exception e) {
			System.out.println("SQLException: " + e.getMessage());
		} finally {
			close(conn, pstmt, rs);
		}
		return clients;
	}
	
	public List<String> getKneighbors(Double[] center, int radius, int people, String client) {
		List<String> clients = new ArrayList<String>();
		try {
			dbConnect();
			/*String sql = "SELECT client_id, (6371000*acos(cos(radians(?))"
					+ "*cos(radians(latitude))*cos(radians(longitude)-radians(?))+"
					+ "sin(radians(?))*sin(radians(latitude)))) as distance "
					+ "from locationdata where client_id != ? and (client_id, time) in "
					+ "(select client_id, max(time) from locationdata group by client_id) "
					+ "having distance <= ? order by distance limit ?;";*/
			String sql = "SELECT client_id, (6371000*acos(cos(radians(?))*cos(radians(latitude))"
					+ "*cos(radians(longitude)-radians(?))+sin(radians(?))*sin(radians(latitude)))) "
					+ "as distance from currentlocation where client_id != ? having distance <= ?"
					+ " order by distance limit ?;";
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setDouble(1, center[0]);
			pstmt.setDouble(2, center[1]);
			pstmt.setDouble(3, center[0]);
			pstmt.setString(4, client);
			pstmt.setInt(5, radius);
			pstmt.setInt(6, people);
			
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				clients.add(rs.getString("client_id"));
			}
		} catch(Exception e) {
			System.out.println("SQLException: " + e.getMessage());
		} finally {
			close(conn, pstmt, rs);
		}
		return clients;
	}
}
